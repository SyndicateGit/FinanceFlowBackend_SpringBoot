package com.financeflow.financeflow_backend.entity;

import java.math.BigDecimal;
import java.util.List;

import jakarta.persistence.*;
import lombok.*;


@Getter
@Setter
@NoArgsConstructor
@AllArgsConstructor
@Builder
@Entity // Specifies class as JPA entity
@Table(name = "accounts") // Specifies the name of the table in the database autogenerated by Hibernate
public class Account {
    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private Long id;

    @Enumerated(EnumType.STRING)
    @Column(nullable = false)
    private AccountType accountType;

    @Column(nullable = false)
    private BigDecimal balance;
    private String currency;

    @OneToMany(cascade = CascadeType.ALL, orphanRemoval = true, fetch = FetchType.LAZY)
    private List<Transaction> transactions;

    public void initiateAccount(){
        this.balance = BigDecimal.ZERO;
        this.currency = "CAD";
    }

    public void initiateSavingsAccount(){
        this.initiateAccount();
        this.accountType = AccountType.SAVINGS;
    }

    public void initiateDebitAccount(){
        this.initiateAccount();
        this.accountType = AccountType.DEBIT;
    }

    public void initiateCreditAccount(){
        this.initiateAccount();
        this.accountType = AccountType.CREDIT;
    }
    public void deposit(BigDecimal amount){
        this.balance = this.balance.add(amount);
    }

    public void withdraw(BigDecimal amount){
        this.balance = this.balance.subtract(amount);
    }

    public void transfer(Account account, BigDecimal amount){
        this.withdraw(amount);
        account.deposit(amount);
    }

    public void addTransaction(Transaction transaction){
        this.transactions.add(transaction);
    }

    public void removeTransaction(Long transactionId){
        this.transactions
                .stream()
                .filter(transaction -> transaction.getId().equals(transactionId))
                .findFirst()
                .ifPresent(transaction -> this.transactions.remove(transaction));
    }

    public void removeTransaction(Transaction transaction){
        this.transactions.remove(transaction);
    }
}
